# Load necessary library (optional but recommended)
library(readr)
# Load necessary library (optional but recommended)
library(readr)
# Import CSV file
data <- read_csv("https://raw.githubusercontent.com/vmandela99/blog_vickman/refs/heads/main/posts/M%26E_01_School_Feeding_Causal_inference_%26_Counterfactuals/school_feeding.csv")  # Use read.csv("your_file.csv") if readr is not installed
View(data)
# View the first few rows
head(data)
names(data)
# Load necessary library
library(dplyr)
# Function to clean and summarize data
summarize_school_feeding <- function(data) {
# Select relevant columns and rename them
cleaned_data <- data %>%
select(
poverty_index, educ_hh, hhsize, dirtfloor, bathroom,
school_distance, attendance_freq, attendance_rate
) %>%
rename(
PovertyIndex = poverty_index,
Education_HH = educ_hh,
Household_Size = hhsize,
DirtFloor = dirtfloor,
BathroomType = bathroom,
SchoolDistance = school_distance,
AttendanceFrequency = attendance_freq,
AttendanceRate = attendance_rate
)
# Compute frequency tables for categorical variables
categorical_vars <- c("DirtFloor", "BathroomType")
freq_tables <- lapply(cleaned_data[categorical_vars], function(var) {
table_data <- as.data.frame(table(var))
table_data$Percentage <- round(prop.table(table(var)) * 100, 2)
return(table_data)
})
# Compute summary statistics for numerical variables
numerical_vars <- c("PovertyIndex", "Education_HH", "Household_Size",
"SchoolDistance", "AttendanceFrequency", "AttendanceRate")
summary_stats <- cleaned_data %>%
summarise(across(all_of(numerical_vars), list(
Mean = ~mean(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE),
Count = ~sum(!is.na(.))
), .names = "{.col}_{.fn}"))
return(list(FrequencyTables = freq_tables, SummaryStatistics = summary_stats))
}
# Example usage
# Assuming your dataset is named 'school_feeding_data'
result <- summarize_school_feeding(school_feeding_data)
# View results
result$FrequencyTables
# Example usage
# Assuming your dataset is named 'school_feeding_data'
result <- summarize_school_feeding(data)
# View results
result$FrequencyTables
result$SummaryStatistics
result$SummaryStatistics
result$SummaryStatistics %>% view()
cleaned_data <- data %>%
select(
poverty_index, educ_hh, hhsize, dirtfloor, bathroom,
school_distance, attendance_freq, attendance_rate
) %>%
rename(
PovertyIndex = poverty_index,
Education_HH = educ_hh,
Household_Size = hhsize,
DirtFloor = dirtfloor,
BathroomType = bathroom,
SchoolDistance = school_distance,
AttendanceFrequency = attendance_freq,
AttendanceRate = attendance_rate
)
glimpse(cleaned_data)
# Load necessary library
library(dplyr)
# Function to clean and summarize data
summarize_school_feeding <- function(data) {
# Select relevant columns and rename them
cleaned_data <- data %>%
select(
poverty_index, educ_hh, hhsize, dirtfloor, bathroom,
school_distance, attendance_freq, attendance_rate
) %>%
rename(
PovertyIndex = poverty_index,
Education_HH = educ_hh,
Household_Size = hhsize,
DirtFloor = dirtfloor,
BathroomType = bathroom,
SchoolDistance = school_distance,
AttendanceFrequency = attendance_freq,
AttendanceRate = attendance_rate
)
# Compute and print frequency tables for categorical variables
categorical_vars <- c("DirtFloor", "BathroomType")
for (var in categorical_vars) {
cat("\n----------------------------------\n")
cat("Frequency Table for:", var, "\n")
cat("----------------------------------\n")
freq_table <- as.data.frame(table(cleaned_data[[var]]))
freq_table$Percentage <- round(prop.table(table(cleaned_data[[var]])) * 100, 2)
print(freq_table)
}
# Compute and print summary statistics for numerical variables
numerical_vars <- c("PovertyIndex", "Education_HH", "Household_Size",
"SchoolDistance", "AttendanceFrequency", "AttendanceRate")
summary_stats <- cleaned_data %>%
summarise(across(all_of(numerical_vars), list(
Mean = ~mean(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE),
Count = ~sum(!is.na(.))
), .names = "{.col}_{.fn}"))
cat("\n----------------------------------\n")
cat("Summary Statistics for Numerical Variables\n")
cat("----------------------------------\n")
print(summary_stats)
}
# Example usage
# Assuming your dataset is named 'school_feeding_data'
summarize_school_feeding(data)
# Function to clean and summarize data
summarize_school_feeding <- function(data) {
# Select relevant columns and rename them
cleaned_data <- data %>%
select(
poverty_index, educ_hh, hhsize, dirtfloor, bathroom,
school_distance, attendance_freq, attendance_rate
) %>%
rename(
PovertyIndex = poverty_index,
Education_HH = educ_hh,
Household_Size = hhsize,
DirtFloor = dirtfloor,
BathroomType = bathroom,
SchoolDistance = school_distance,
AttendanceFrequency = attendance_freq,
AttendanceRate = attendance_rate
)
# Compute frequency tables for categorical variables
categorical_vars <- c("DirtFloor", "BathroomType")
freq_tables <- list()
for (var in categorical_vars) {
freq_table <- as.data.frame(table(cleaned_data[[var]]))
freq_table$Percentage <- round(prop.table(table(cleaned_data[[var]])) * 100, 2)
freq_tables[[var]] <- freq_table
}
# Compute summary statistics for numerical variables
numerical_vars <- c("PovertyIndex", "Education_HH", "Household_Size",
"SchoolDistance", "AttendanceFrequency", "AttendanceRate")
summary_stats <- cleaned_data %>%
summarise(across(all_of(numerical_vars), list(
Mean = ~mean(. , na.rm = TRUE),
SD = ~sd(. , na.rm = TRUE),
Count = ~sum(!is.na(.))
), .names = "{.col}_{.fn}"))
# Store results in a list
results <- list(
FrequencyTables = freq_tables,
SummaryStatistics = summary_stats
)
return(results)
}
# Example usage
# Assuming your dataset is named 'school_feeding_data'
output_results <- summarize_school_feeding(data)
# Access saved outputs
output_results$FrequencyTables  # List of frequency tables
output_results$SummaryStatistics  # Data frame of summary stats
# View individual frequency tables
output_results$FrequencyTables$DirtFloor
output_results$FrequencyTables$BathroomType
# View summary statistics
print(output_results$SummaryStatistics)
names(data)
glimpse(data)
quantile(data$age_hh)
count(data$female_hh)
tab(data$female_hh)
table(data$female_hh)
# Load necessary library (optional but recommended)
library(readr)
# Import CSV file
data <- read_csv("https://raw.githubusercontent.com/vmandela99/blog_vickman/refs/heads/main/posts/M%26E_01_School_Feeding_Causal_inference_%26_Counterfactuals/school_feeding.csv")  # Use read.csv("your_file.csv") if readr is not installed
# Create age group variable
df <- data %>%
mutate(age_group = case_when(
age_hh >= 0 & age_hh <= 14  ~ "0-14 years",
age_hh >= 15 & age_hh <= 34 ~ "15-34 years",
age_hh >= 35 & age_hh <= 45 ~ "35-45 years",
age_hh > 45                 ~ "45+ years"
))
View(df)
# Create age group variable
df <- data %>%
mutate(age_group = case_when(
age_hh >= 0 & age_hh <= 14  ~ "0-14 years",
age_hh >= 15 & age_hh <= 34 ~ "15-34 years",
age_hh >= 35 & age_hh <= 45 ~ "35-45 years",
age_hh > 45                 ~ "45+ years"
)) %>%
mutate(gender_of_household_head = ifelse(female_hh == 1, "Female", "Male"))
# Function to generate cross-tabulation tables
generate_cross_tabs <- function(data, group_var, cross_vars) {
result <- list()
for (var in cross_vars) {
tab <- data %>%
tabyl(!!sym(group_var), !!sym(var)) %>%
adorn_totals("both") %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
result[[var]] <- tab
}
return(result)
}
# Define variables to cross-tabulate
cross_vars <- c("hhsize", "dirtfloor", "bathroom", "poverty_index", "school_distance", "attendance_rate")
# Generate cross-tabulations
cross_tab_results <- generate_cross_tabs(df, "gender_of_household_head", cross_vars)
# Load necessary library (optional but recommended)
library(readr)
library(dplyr)
library(janitor)
# Function to generate cross-tabulation tables
generate_cross_tabs <- function(data, group_var, cross_vars) {
result <- list()
for (var in cross_vars) {
tab <- data %>%
tabyl(!!sym(group_var), !!sym(var)) %>%
adorn_totals("both") %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
result[[var]] <- tab
}
return(result)
}
# Define variables to cross-tabulate
cross_vars <- c("hhsize", "dirtfloor", "bathroom", "poverty_index", "school_distance", "attendance_rate")
# Generate cross-tabulations
cross_tab_results <- generate_cross_tabs(df, "gender_of_household_head", cross_vars)
# Function to generate cross-tabulation tables
generate_cross_tabs <- function(data, group_var, cross_vars) {
result <- list()
for (var in cross_vars) {
tab <- data %>%
tabyl(!!sym(group_var), !!sym(var)) %>%
adorn_totals("both") %>%
adorn_percentages("row") %>%
adorn_pct_formatting(digits = 1) %>%
adorn_ns()
result[[var]] <- tab
}
return(result)
}
# Define variables to cross-tabulate
cross_vars <- c("hhsize", "dirtfloor", "bathroom", "poverty_index")
# Generate cross-tabulations
cross_tab_results <- generate_cross_tabs(df, "gender_of_household_head", cross_vars)
# Print results
cross_tab_results
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(officer)
library(flextable)
# Sample cross-tabulation data
cross_tab_data <- list(
dirtfloor = data.frame(
gender_of_household_head = c("Female", "Male", "Total"),
No = c(38.8, 39.7, 39.6),
Yes = c(61.2, 60.3, 60.4)
),
bathroom = data.frame(
gender_of_household_head = c("Female", "Male", "Total"),
No = c(45.0, 37.7, 38.4),
Yes = c(55.0, 62.3, 61.6)
)
)
# Function to plot bar charts with percentages inside
plot_cross_tab <- function(data, title) {
melted_data <- tidyr::pivot_longer(data, cols = -gender_of_household_head, names_to = "Category", values_to = "Percentage")
ggplot(melted_data, aes(x = gender_of_household_head, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "stack", color = "black") +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_stack(vjust = 0.5), size = 5, color = "white") +
scale_fill_manual(values = c("No" = "#D2042D", "Yes" = "#000000")) +  # Cherry and black
theme_minimal() +
labs(title = title, x = "Gender of Household Head", y = "Percentage", fill = "Condition") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
}
# Plot and save
p1 <- plot_cross_tab(cross_tab_data$dirtfloor, "Household with Dirt Floors by Gender")
p2 <- plot_cross_tab(cross_tab_data$bathroom, "Household with Bathroom Facilities by Gender")
p1
p2
# Function to create side-by-side bar charts
plot_cross_tab_dodge <- function(data, title) {
melted_data <- pivot_longer(data, cols = -gender_of_household_head, names_to = "Category", values_to = "Percentage")
ggplot(melted_data, aes(x = gender_of_household_head, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.6) +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_dodge(width = 0.7), vjust = -0.5, size = 5, color = "black") +
scale_fill_manual(values = c("No" = "#D2042D", "Yes" = "#000000")) +  # Cherry and black
theme_minimal() +
labs(title = title, x = "Gender of Household Head", y = "Percentage", fill = "Condition") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
}
# Plot and save
p1 <- plot_cross_tab_dodge(cross_tab_data$dirtfloor, "Household with Dirt Floors by Gender")
# Function to create side-by-side bar charts
plot_cross_tab_dodge <- function(data, title) {
melted_data <- pivot_longer(data, cols = -gender_of_household_head, names_to = "Category", values_to = "Percentage")
ggplot(melted_data, aes(x = gender_of_household_head, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.6) +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_dodge(width = 0.7), vjust = -0.5, size = 5, color = "black") +
scale_fill_manual(values = c("No" = "#D2042D", "Yes" = "#000000")) +  # Cherry and black
theme_minimal() +
labs(title = title, x = "Gender of Household Head", y = "Percentage", fill = "Condition") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
}
# Plot and save
p1 <- plot_cross_tab_dodge(cross_tab_data$dirtfloor, "Household with Dirt Floors by Gender")
library(tidyverse)
# Plot and save
p1 <- plot_cross_tab_dodge(cross_tab_data$dirtfloor, "Household with Dirt Floors by Gender")
p2 <- plot_cross_tab_dodge(cross_tab_data$bathroom, "Household with Bathroom Facilities by Gender")
p1
p2
# Plot without title, y-axis limit to 100, and smaller size
ggplot(data, aes(x = gender_of_household_head, y = percentage, fill = dirtfloor)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
scale_y_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1)) +
scale_fill_manual(values = c("cherry" = "#D2042D", "black" = "black")) +
theme_minimal(base_size = 10) +  # Reduced font size
labs(x = "Gender of Household Head", y = "Percentage") +
theme(legend.title = element_blank(), legend.position = "bottom")
ggplot(melted_data, aes(x = gender_of_household_head, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.6) +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3, color = "black") +
scale_fill_manual(values = c("No" = "#D2042D", "Yes" = "#000000")) +  # Cherry and black
theme_minimal() +
labs(title = title, x = "Gender of Household Head", y = "Percentage", fill = "Condition") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.title = element_blank())
# Function to create side-by-side bar charts
plot_cross_tab_dodge <- function(data, title) {
melted_data <- pivot_longer(data, cols = -gender_of_household_head, names_to = "Category", values_to = "Percentage")
ggplot(melted_data, aes(x = gender_of_household_head, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.6) +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3, color = "black") +
scale_fill_manual(values = c("No" = "#D2042D", "Yes" = "#000000")) +  # Cherry and black
theme_minimal() +
labs(title = title, x = "Gender of Household Head", y = "Percentage", fill = "Condition") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.title = element_blank())
}
# Plot and save
p1 <- plot_cross_tab_dodge(cross_tab_data$dirtfloor, "Household with Dirt Floors by Gender")
p2 <- plot_cross_tab_dodge(cross_tab_data$bathroom, "Household with Bathroom Facilities by Gender")
p1
# Function to create side-by-side bar charts
plot_cross_tab_dodge <- function(data) {
melted_data <- pivot_longer(data, cols = -gender_of_household_head, names_to = "Category", values_to = "Percentage")
ggplot(melted_data, aes(x = gender_of_household_head, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.6) +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_dodge(width = 0.7), vjust = -0.5, size = 3, color = "black") +
scale_fill_manual(values = c("No" = "#D2042D", "Yes" = "#000000")) +  # Cherry and black
theme_minimal() +
labs(title = "", x = "Gender of Household Head", y = "Percentage", fill = "Condition") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
legend.title = element_blank())
}
# Plot and save
p1 <- plot_cross_tab_dodge(cross_tab_data$dirtfloor)
p2 <- plot_cross_tab_dodge(cross_tab_data$bathroom)
p1
p2
